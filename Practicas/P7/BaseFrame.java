/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package com.uca.belousov_zhabotinsky_reaction;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author guillermogirongarcia
 */
public class BaseFrame extends javax.swing.JFrame {

    /**
     * Creates new form BaseFrame
     */
    public BaseFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WidthLabel = new javax.swing.JLabel();
        WidthText = new javax.swing.JTextField();
        HeightText = new javax.swing.JTextField();
        HeightLabel = new javax.swing.JLabel();
        GenerationsLabel = new javax.swing.JLabel();
        GenerationsText = new javax.swing.JTextField();
        RunButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        NextGenButton = new javax.swing.JButton();
        PauseButton = new javax.swing.JButton();
        SpeedSlider = new javax.swing.JSlider();
        ExecSpeedLabel = new javax.swing.JLabel();
        AutoRunCheckBox = new javax.swing.JCheckBox();
        FrameLabel = new javax.swing.JLabel();
        FrameText = new javax.swing.JTextField();
        CompositionText = new javax.swing.JLabel();
        AComponentLabel = new javax.swing.JLabel();
        BComponentLabel = new javax.swing.JLabel();
        CComponentLabel = new javax.swing.JLabel();
        ApercentLabel = new javax.swing.JLabel();
        BpercentLabel = new javax.swing.JLabel();
        CpercentLabel = new javax.swing.JLabel();
        SimulationPanel = new javax.swing.JPanel();
        SimPanel = new javax.swing.JPanel();
        CurvePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setSize(new java.awt.Dimension(1920, 1080));

        WidthLabel.setText("Width:");

        HeightLabel.setText("Height:");

        GenerationsLabel.setText("Generations:");

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        NextGenButton.setText("Next Gen.");
        NextGenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextGenButtonActionPerformed(evt);
            }
        });

        PauseButton.setText("Pause");
        PauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButtonActionPerformed(evt);
            }
        });

        SpeedSlider.setMaximum(3);
        SpeedSlider.setMinimum(1);
        SpeedSlider.setValue(2);
        SpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SpeedSliderStateChanged(evt);
            }
        });

        ExecSpeedLabel.setText("Execution Speed:");

        AutoRunCheckBox.setText("Auto-Run");
        AutoRunCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoRunCheckBoxActionPerformed(evt);
            }
        });

        FrameLabel.setText("Frame:");

        FrameText.setEditable(false);
        FrameText.setText("0");
        FrameText.setMaximumSize(new java.awt.Dimension(23, 34));

        CompositionText.setText("Composition:");

        AComponentLabel.setText("A");

        BComponentLabel.setText("B");

        CComponentLabel.setText("C");

        ApercentLabel.setText("0 %");

        BpercentLabel.setText("0 %");

        CpercentLabel.setText("0 %");

        SimulationPanel.setBorder(new javax.swing.border.MatteBorder(null));
        SimulationPanel.setMaximumSize(new java.awt.Dimension(1000, 800));
        SimulationPanel.setMinimumSize(new java.awt.Dimension(1000, 1000));

        javax.swing.GroupLayout SimulationPanelLayout = new javax.swing.GroupLayout(SimulationPanel);
        SimulationPanel.setLayout(SimulationPanelLayout);
        SimulationPanelLayout.setHorizontalGroup(
            SimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        SimulationPanelLayout.setVerticalGroup(
            SimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        SimPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        SimPanel.setMaximumSize(new java.awt.Dimension(800, 800));
        SimPanel.setMinimumSize(new java.awt.Dimension(800, 800));
        SimPanel.setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout SimPanelLayout = new javax.swing.GroupLayout(SimPanel);
        SimPanel.setLayout(SimPanelLayout);
        SimPanelLayout.setHorizontalGroup(
            SimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 796, Short.MAX_VALUE)
        );
        SimPanelLayout.setVerticalGroup(
            SimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 796, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CurvePanelLayout = new javax.swing.GroupLayout(CurvePanel);
        CurvePanel.setLayout(CurvePanelLayout);
        CurvePanelLayout.setHorizontalGroup(
            CurvePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
        CurvePanelLayout.setVerticalGroup(
            CurvePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(SimPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SimulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 467, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CompositionText)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(FrameLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(FrameText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(WidthLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(WidthText, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(HeightLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(HeightText, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(RunButton)
                                                .addComponent(GenerationsLabel))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(GenerationsText, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(AutoRunCheckBox)))
                                        .addComponent(ExecSpeedLabel)
                                        .addComponent(SpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(StopButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(NextGenButton)
                                            .addGap(18, 18, 18)
                                            .addComponent(PauseButton)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BComponentLabel)
                                    .addComponent(AComponentLabel)
                                    .addComponent(CComponentLabel))
                                .addGap(93, 93, 93)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ApercentLabel)
                                    .addComponent(BpercentLabel)
                                    .addComponent(CpercentLabel))))
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(CurvePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(WidthLabel)
                                    .addComponent(WidthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(HeightLabel)
                                    .addComponent(HeightText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(SimulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GenerationsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GenerationsLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RunButton)
                            .addComponent(AutoRunCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NextGenButton)
                            .addComponent(PauseButton)
                            .addComponent(StopButton))
                        .addGap(18, 18, 18)
                        .addComponent(ExecSpeedLabel)
                        .addGap(18, 18, 18)
                        .addComponent(SpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FrameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FrameLabel))
                        .addGap(18, 18, 18)
                        .addComponent(CompositionText)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AComponentLabel)
                            .addComponent(ApercentLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BComponentLabel)
                            .addComponent(BpercentLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CComponentLabel)
                            .addComponent(CpercentLabel))
                        .addGap(41, 41, 41)
                        .addComponent(CurvePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SimPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        init();
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        
        
        int width = 200, height = 200,
        nThreads = Runtime.getRuntime().availableProcessors();

        if(!WidthText.getText().isBlank())
            width = Integer.parseInt(WidthText.getText());
        
        if(!HeightText.getText().isBlank())
            height = Integer.parseInt(HeightText.getText());

        width = width > 800 ? 8000 : width;
        height = height > 800 ? 800 : height;
        width = width < 200 ? 200 : width;
        height = height < 200 ? 200 : height;

        if(!GenerationsText.getText().isBlank())
            generations = Integer.parseInt(GenerationsText.getText());
            
        reticle = new Reticle(width, height, true);

        int frame = width / nThreads, start = 0, end = frame;
        
        tpe = (ThreadPoolExecutor) Executors.newFixedThreadPool(nThreads);

        for(int i = 0; i < nThreads; ++i)
        {
            tpe.execute(new Reticle(start, end));
            start = end;
            end += frame;
        }

        tpe.execute(new Reticle(start, width));

        tpe.shutdown();

        try 
        {
            if (!tpe.awaitTermination(10, TimeUnit.SECONDS))
                tpe.shutdownNow();
        } catch (InterruptedException e) 
        {
            e.printStackTrace();
        }

        SimPanel.add(reticle);
        reticle.repaint();
        ApercentLabel.setText(Reticle.aPercentage() + " %");
        BpercentLabel.setText(Reticle.bPercentage() + " %");
        CpercentLabel.setText(Reticle.cPercentage() + " %");

        curve = new plotCurve();
        curve.addGenerationDensity((int)Reticle.aPercentage(), (int)Reticle.bPercentage(), 
        (int)Reticle.cPercentage());

        Reticle.resetPercentage();

        CurvePanel.add(curve);
        curve.repaint();

        exe = new ThreadPoolExecutor(1, 1, 1, TimeUnit.HOURS, new ArrayBlockingQueue<Runnable>(2));

        exe.execute(new Runnable(){
        
            @Override
            public void run() 
            {
                BelousovReaction();
            }
        });

        if(!autoRun)
        {
            paused = true;
            PauseButton.setText("Resume");
            NextGenButton.setEnabled(true);
        }
            
        exe.shutdown();
        PauseButton.setEnabled(true);
        RunButton.setEnabled(false);
        StopButton.setEnabled(true);
    }//GEN-LAST:event_RunButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed

        generations = 0;
        currentGen = 0;

        if(!tpe.isShutdown())
            tpe.shutdownNow();

        if(!exe.isShutdown())
            exe.shutdownNow();

        FrameText.setText("0");
        WidthText.setText("");
        HeightText.setText("");
        GenerationsText.setText("");
        ApercentLabel.setText("0 %");
        BpercentLabel.setText("0 %");
        CpercentLabel.setText("0 %");
        StopButton.setEnabled(false);
        NextGenButton.setEnabled(false);
        PauseButton.setEnabled(false);
        RunButton.setEnabled(true);
        SimPanel.remove(reticle);
        SimPanel.repaint();
        paused = false;
    }//GEN-LAST:event_StopButtonActionPerformed

    private void NextGenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextGenButtonActionPerformed
        
        lock.lock();
        unpaused.signal();
        lock.unlock();
    }//GEN-LAST:event_NextGenButtonActionPerformed

    private void PauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButtonActionPerformed
        
        if (!paused) 
        {
            paused = true;
            PauseButton.setText("Resume");
        } else 
        {
            PauseButton.setText("Pause");
            paused = false;
            lock.lock();
            unpaused.signal();
            lock.unlock();
        }

        NextGenButton.setEnabled(true);
    }//GEN-LAST:event_PauseButtonActionPerformed

    private void SpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SpeedSliderStateChanged
        switch (SpeedSlider.getValue()) 
        {
            case 1:
                speed = 500L;
                break;
            case 2:
                speed = 150L;
                break;
            case 3:
                speed = 35L;
                break;
        }
    }//GEN-LAST:event_SpeedSliderStateChanged

    private void AutoRunCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoRunCheckBoxActionPerformed
        autoRun = !autoRun;
    }//GEN-LAST:event_AutoRunCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AComponentLabel;
    private javax.swing.JLabel ApercentLabel;
    private javax.swing.JCheckBox AutoRunCheckBox;
    private javax.swing.JLabel BComponentLabel;
    private javax.swing.JLabel BpercentLabel;
    private javax.swing.JLabel CComponentLabel;
    private javax.swing.JLabel CompositionText;
    private javax.swing.JLabel CpercentLabel;
    private javax.swing.JPanel CurvePanel;
    private javax.swing.JLabel ExecSpeedLabel;
    private javax.swing.JLabel FrameLabel;
    private javax.swing.JTextField FrameText;
    private javax.swing.JLabel GenerationsLabel;
    private javax.swing.JTextField GenerationsText;
    private javax.swing.JLabel HeightLabel;
    private javax.swing.JTextField HeightText;
    private javax.swing.JButton NextGenButton;
    private javax.swing.JButton PauseButton;
    private javax.swing.JButton RunButton;
    private javax.swing.JPanel SimPanel;
    private javax.swing.JPanel SimulationPanel;
    private javax.swing.JSlider SpeedSlider;
    private javax.swing.JButton StopButton;
    private javax.swing.JLabel WidthLabel;
    private javax.swing.JTextField WidthText;
    // End of variables declaration//GEN-END:variables

    private boolean autoRun, paused;
    private long speed;
    private int generations, currentGen, nThreads;
    private ThreadPoolExecutor tpe, exe;
    private ReentrantLock lock;
    private Condition unpaused;
    private Reticle reticle;
    private plotCurve curve;

    private void init()
    {
        speed = 500L;
        generations = 0;
        currentGen = 0;
        nThreads = 1;
        autoRun = false;
        paused = false;
        lock = new ReentrantLock();
        unpaused = lock.newCondition();
        StopButton.setEnabled(false);
        PauseButton.setEnabled(false);
        NextGenButton.setEnabled(false);
        SimulationPanel.setVisible(true);
        SimulationPanel.setSize(1000, 800);
    }

    private void BelousovReaction()
    {
        int frame = Reticle.width / nThreads, 
        start = 0, end = frame;

        do
        {
            if(paused)
            {
                lock.lock();
                try {
                    unpaused.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                lock.unlock();
            }

            start = 0;
            end = frame;

            tpe = (ThreadPoolExecutor) Executors.newFixedThreadPool(nThreads);

            for(int i = 0; i < nThreads; ++i)
            {
                tpe.execute(new ParallelBelZab(start, end));
                start = end;
                end += frame;
            }

            tpe.execute(new ParallelBelZab(start, Reticle.width));
            tpe.shutdown();

            try 
            {
                if (!tpe.awaitTermination(10, TimeUnit.SECONDS))
                    tpe.shutdownNow();
            } catch (InterruptedException e) 
            {
                e.printStackTrace();
            }

            reticle.repaint();
            FrameText.setText(String.valueOf(currentGen));
            ApercentLabel.setText(Reticle.aPercentage() + " %");
            BpercentLabel.setText(Reticle.bPercentage() + " %");
            CpercentLabel.setText(Reticle.cPercentage() + " %");

            curve.addGenerationDensity((int) Reticle.aPercentage(), (int) Reticle.bPercentage(),
                    (int) Reticle.cPercentage());

            Reticle.resetPercentage();

            curve.repaint();

            try 
            {
                Thread.sleep(speed);
            } catch (InterruptedException ex) 
            {
                ex.printStackTrace();
            }

            ++currentGen;
        }while(currentGen <= generations);

        NextGenButton.setEnabled(false);
        PauseButton.setEnabled(false);
    }
}
